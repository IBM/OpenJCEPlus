/*
 * Copyright IBM Corp. 2025
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms provided by IBM in the LICENSE file that accompanied
 * this code, including the "Classpath" Exception described therein.
 */
package ibm.jceplus.junit.base;

import ibm.security.internal.spec.RawKeySpec;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import java.util.HexFormat;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import sun.security.util.DerValue;
import sun.security.x509.AlgorithmId;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.fail;

public class BaseTestPQCKeys extends BaseTestJunit5 {


    protected KeyPairGenerator pqcKeyPairGen;
    protected KeyFactory pqcKeyFactory;



    @BeforeEach
    public void setUp() throws Exception {


    }

    @ParameterizedTest
    @CsvSource({"ML-KEM", "MLKEM512", "ML_KEM_768", "ML-KEM-1024",
                "ML_KEM_512", "ML_KEM_768", "ML_KEM_1024",
                "ML-DSA", "ML_DSA_44", "ML_DSA_65", "ML-DSA-87"})
    public void testPQCKeyGen(String Algorithm) throws Exception {
        if (getProviderName().equals("OpenJCEPlusFIPS")) {
            //FIPS does not support PQC keys currently
            return;
        }
        try {
            KeyPair pqcKeyPair = generateKeyPair(Algorithm);

            pqcKeyPair.getPublic();
            pqcKeyPair.getPrivate();
        } catch (Exception e) {
            throw new Exception(e.getCause() +" - "+Algorithm, e);
        }
    }

    @ParameterizedTest
    @CsvSource({"ML-KEM", "ML-KEM-512", "ML-KEM-768", "ML-KEM-1024",
                "ML-DSA", "ML_DSA_44", "ML_DSA_65", "ML-DSA-87"})
    public void testPQCKeyFactoryCreateFromEncoded(String Algorithm) throws Exception {
        if (getProviderName().equals("OpenJCEPlusFIPS")) {
            //FIPS does not support PQC keys currently
            return;
        }
        keyFactoryCreateFromEncoded(Algorithm);
    }
    @ParameterizedTest
    @CsvSource({"ML-DSA", "ML-DSA-44", "ML-DSA-65", "ML-KEM", "ML-KEM-512"})
    public void testPQCKeyFactoryCreateFromStaticEncoded(String Algorithm) throws Exception {
        if (getProviderName().equals("OpenJCEPlusFIPS")) {
            //FIPS does not support PQC keys currently
            return;
        }
        keyFactoryCreateFromStaticEncoded(Algorithm);
    }
    
    protected KeyPair generateKeyPair(String Algorithm) throws Exception {
        pqcKeyPairGen = KeyPairGenerator.getInstance(Algorithm, getProviderName());

        KeyPair keyPair = pqcKeyPairGen.generateKeyPair();
        if (keyPair.getPrivate() == null) {
            fail("Private key is null - " + Algorithm);
        }

        if (keyPair.getPublic() == null) {
            fail("Public key is null - " + Algorithm);
        }

        if (!(keyPair.getPrivate() instanceof PrivateKey)) {
            fail("Key is not a PrivateKey - " + Algorithm);
        }

        if (!(keyPair.getPublic() instanceof PublicKey)) {
            fail("Key is not a PublicKey - " + Algorithm);
        }
        //System.out.println("Pub key - "+Algorithm+ " = "+HexFormat.of().formatHex(((com.ibm.crypto.plus.provider.PQCPublicKey)(keyPair.getPublic())).getKeyBytes()));
        //System.out.println("Priv key - "+Algorithm+ " = "+HexFormat.of().formatHex(((com.ibm.crypto.plus.provider.PQCPrivateKey)(keyPair.getPrivate())).getKeyBytes()));
 
        return keyPair;
    }

    protected void keyFactoryCreateFromEncoded(String Algorithm) throws Exception {
        
        pqcKeyFactory = KeyFactory.getInstance(Algorithm, getProviderName());
        KeyPair pqcKeyPair = generateKeyPair(Algorithm);
        
        X509EncodedKeySpec x509Spec = new X509EncodedKeySpec(pqcKeyPair.getPublic().getEncoded());
        PKCS8EncodedKeySpec pkcs8Spec = new PKCS8EncodedKeySpec(
                pqcKeyPair.getPrivate().getEncoded());
        PublicKey pub =  pqcKeyFactory.generatePublic(x509Spec);
        PrivateKey priv =  pqcKeyFactory.generatePrivate(pkcs8Spec);

        assertArrayEquals(pub.getEncoded(), pqcKeyPair.getPublic().getEncoded(), "Public key does not match generated public key - "+Algorithm);
        assertArrayEquals(priv.getEncoded(), pqcKeyPair.getPrivate().getEncoded(), "Private key does not match generated public key - "+Algorithm);

    }

    protected void keyFactoryCreateFromStaticEncoded(String Algorithm) throws Exception {
        
        String privBytes = null;
        String pubBytes = null;

        switch (Algorithm) {
            case "ML-KEM-512":
                privBytes ="0482066004820664048206606e1882e6e554a64051f4a6aac561ca6dcb7c4b5b151589075a7800fd85148207220659cc77538c4acb676119117459c121c809547c1bcf9a9dd2c707c6c66d93ebb4cd0715ffe478d253274a9576d20991a7085188f6852f9c8a66033c327ac3b20b47eaa1c664cbc329080354676838d84c8ba8420ef99e93ec8c02f7432ee72eee843f42b95ea0d05eb990c261c82f6d173533a6b07ac29482c304c9ebcd50606d66335566c8ab9e5187ae06814f7848dea97516644ee606b723dbc1fc98bb6808745e3551741c5a47586c1c9ca54ac21598781e7171c5a1b98f66f99782acaf5be8951a8199fcfa81f854303b581ca42117bd41a8a1a94a0e7206e52b9eaf5b69f6a396b9d09171601465c57a54329726b9a02c3c51c4281c2581430a291cf1c86497d5c8303212cae7b085b474b866639d578505d489d936c38dec00cb78a700e75150ea5a8992c49a05790a8a9167231c97f04db84aadd30623840aa1ac72c3be43b7a68377ac12c8bc0482bae2285fd42f78221de523416d9ba1c9e13ec4727402079badf79dacdbc139d80e6875896154b6ae7b536a6aa598325360facdad1b13f8c6ae2036202d81bd5c0bcf316c56a5377aa451366b20ad95a52521c285affb0755f8b62c2b269ef5bbb8325e3be78ab9a735c8356d7a23a15b38574062081864cd9d354f1dcbc7eacb7068a55d556314b4077fe9876bc3c8c20c9491ca09066274733b47a8bb1ab570500403c0a6a738683ff399d542537c51c2aef70f24895a31a5cf4a9b06a29531e0783ce95784f337be5c068e73b78bc509c5ad8262ce042f10bb2c7fd12afd602596e41df4f22c5d8ba482007d35d08cae2372cf52cce163cdc43968712c936b8c7371da1f7bf74a6deac2f3c121ab2a22d5fa0b41c75f9b9c1cb644476c1677ac4aa66957cf6447037bc28725a25caa89193f012d2fd81247911a738149dbe58470b344ab031c75513da4ba66e1c6a9086632fa2174a9546d48c8ab4795416b16badfa0acf9157732bc47680b644fc7497256a10ea7cfb3f01c76d3128838949a1cb7d099c84e687bcdb674df263f1cda21a0ec3aa9463e47088eb02c93ef4a55b4d45addd9afd2d47856212e0c9b42f18424cdc30364b59892ba346c75a935f140ba72437e1934406b3132ec51d9d103f9696a23856147356368b6ace0ac0ed16b7f8026980038a0ee0271454b3195f4969e13b5632059b293554d8ac329563509a692180b1e40a21137a47948d61fba818572284d37a12edab8c3a5a070ac04cdc899b6b0d41175dc285fab051eb7c2c613431ce67cee1069d14c079d01cf3b250c3d88791fcb4933034deb30c76c0c00e07a1bec5191fad58c947abaf0a667a1847112f8b0cf738508a2746d6b47d7cbcde69a462c69941e5b6083121c87a6ba58211044f83932d809929314b57c3df6e00145da07f69c106e9a88d3574f661398f5a0705afab8e0f318ae28cbd44107a802649d139c0ee958b6d90fb2694ec9ba9227d85ab8f171f7157e401b9e89589a0fb7922a1a4a9f3b53a62b8d6aeccc17d011e0080f4a5a081d097bec5cb89c300286350244738c6f2c24a8a4683d60bdb5cc0631d85f0131a101a38c7b72b3c0018766561ded7c1637c67cae498485e50dbfb603b8a3b770ec104ce37e3be99b2ddcb8386ac9f984bbbc825f5353618f66c4ea25bcf98141bd8b81525395ca4a1093036ae40215ffc9b0b59274fbd9ae25a513e46396d83b9aa30455663c523187294630b4a777bf5b883ca3511f0ce0ae36483ebc41aede8b1251984b4cf335a0c60666289706d051d7f819d7f9804b898bd9c968e30153f13753fb2746e6295a2068cd6eb086226a8c7dbba74a1bb21e63ce6483cca5fa30d4d1ae50ca3b44a0954ddabb58b400989b2cdcc69c2bcb47cba43dc339008b667561caac7b7acb15b755022b8fbf2c9f0a38cd18c1c1f0296748288d11c34fd3e9019796c1292c80e794c35b96722b446878235add89cf1b7501457cc25bd65bbba2cd15b710e4b13b3b4c07eea61661188784036e79628b2a546168866db5e79da8e238aa58a554b2279ad0cace65b35bdcc18f3b84460a2021ba0adcb7573ddacd11ba3377f71a7b4c2dfe310e43a7c5aea389ea003fdaaa8245d61d25a132b1b3c7e2b88eaa0d92f8686e5131adbff3881135eeeba50156f862274721802ac49ad30ce288b5a625ef1ed1e9814a1fca936dd632aff414f5a71a734180c2565dbe87db1c817a73b359aaf424f6e64b9bd84a427f8cabe91e84d8d6f7c558746840391dc71a";
                pubBytes = "a0ec3aa9463e47088eb02c93ef4a55b4d45addd9afd2d47856212e0c9b42f18424cdc30364b59892ba346c75a935f140ba72437e1934406b3132ec51d9d103f9696a23856147356368b6ace0ac0ed16b7f8026980038a0ee0271454b3195f4969e13b5632059b293554d8ac329563509a692180b1e40a21137a47948d61fba818572284d37a12edab8c3a5a070ac04cdc899b6b0d41175dc285fab051eb7c2c613431ce67cee1069d14c079d01cf3b250c3d88791fcb4933034deb30c76c0c00e07a1bec5191fad58c947abaf0a667a1847112f8b0cf738508a2746d6b47d7cbcde69a462c69941e5b6083121c87a6ba58211044f83932d809929314b57c3df6e00145da07f69c106e9a88d3574f661398f5a0705afab8e0f318ae28cbd44107a802649d139c0ee958b6d90fb2694ec9ba9227d85ab8f171f7157e401b9e89589a0fb7922a1a4a9f3b53a62b8d6aeccc17d011e0080f4a5a081d097bec5cb89c300286350244738c6f2c24a8a4683d60bdb5cc0631d85f0131a101a38c7b72b3c0018766561ded7c1637c67cae498485e50dbfb603b8a3b770ec104ce37e3be99b2ddcb8386ac9f984bbbc825f5353618f66c4ea25bcf98141bd8b81525395ca4a1093036ae40215ffc9b0b59274fbd9ae25a513e46396d83b9aa30455663c523187294630b4a777bf5b883ca3511f0ce0ae36483ebc41aede8b1251984b4cf335a0c60666289706d051d7f819d7f9804b898bd9c968e30153f13753fb2746e6295a2068cd6eb086226a8c7dbba74a1bb21e63ce6483cca5fa30d4d1ae50ca3b44a0954ddabb58b400989b2cdcc69c2bcb47cba43dc339008b667561caac7b7acb15b755022b8fbf2c9f0a38cd18c1c1f0296748288d11c34fd3e9019796c1292c80e794c35b96722b446878235add89cf1b7501457cc25bd65bbba2cd15b710e4b13b3b4c07eea61661188784036e79628b2a546168866db5e79da8e238aa58a554b2279ad0cace65b35bdcc18f3b84460a2021ba0adcb7573ddacd11ba3377f71a7b4c2dfe310e43a7c5aea389ea003fdaaa8245d61d25a132b1b3c7e2b88eaa0d92f8686e5131adbff3881135eeeba50156f862274721802ac49ad30ce288";
                break;
            case "ML-DSA-44":
                privBytes
                pubBytes
                break;
            case "ML-DSA-65":
                privBytes ="30806f490188b3cb38c0b8b234fa6c56e86d0b226a9185286d5ee804cd379e46545efaaac7e4fa6cd53ee5043df1e727fc850acd0e6bfdce91a71f29beb4b0cfc0e332be33026cbd7e5c20fe7dfaaa786698fac6f3f2dc1270bf71c6c1ee23e949c03c4711ba9d75001c991297f67f845be45523960e068c50df760f5d7bab7dd167d84076c843155f69d06442013fc25b329e1d08fa60674ee21c06c173e8f91a1d7a7cee8d06094c300a4cf5878f6edd7698bf6d42d61fd998cf89792b770367fd35b63396569214ffcae2c0bf1c1f9ae9fbc729e5f9d049650de2d2f259de7148ea7280619df334f54e8513d2839b0a2ff0a04fd648201ce987531fa8e7faef7ba8abc45049c4bef885e27400f1002d72c93ce5193791e4e6555fc0dd38247f1859cd25e9e20164a374d9be094b5c30b79f0d53d4122a38f18d373961b181af9f56d930837a6387b44eefb999cbaea897c0098a020ceaf4299fd43a676fa378d01c97edcb9c2417b52c19958df38a18efd348783c96562e662d806bcbfa35c9aae5d2563aab604cfe2a1237d132f77ca7e70a9e2e9d2426a72663394366094be2d4ea11232beceaa4b480e1ad28b6444d99c1bc05d5c0e5b796287b91d99612bdb6fce552ab1e99fc5e60588938e71e852881ea7d4227a7bace2e801aa134a81b3cbda647301364dec9340229cea2f549d3721f9f293b8ff0eabb749254badd6009c5e94074290c1e93eefe5f2aa18a573fcb8a17819356190222da5ab92a0cdfade577ad624fb25ffe723d1208e71734391296e4f6f83928950571738baf8534977efaac903d9358e89ec8a565c2ab50d148aef115a40a5f356b793b94f847bf58342123ccb4f7770b30564f14e145faadf0709eb3e7cf6994306b20566d123770414aad2850365d6d2523f577c75177f4bb3a91ab2d3d5d8d8a7ab7d02ba684d2bf64bc7381c42aa4fc90bd08c0971219437eefcba153cbd23e0fd1b799c9d6d72bb92f7b4db6aa21977e6a9d679c5a54485e9c487c2906356e7c24c2ba7bc511349fd99641be6a5fa405cd0aa2798a89835389eba358df2a68f366b0f6508fc592a147602f72eca9b49126ff0d3b1a3ef292bb683e16bacafa88e6bca143256374a93f489f30d720807791dab98be817f41c789592c9f97735e9c6d6e75b2924d97d9dd780e5a20f7e3cac122446bfdb13a8502bcc8e1235601ef6f327162a96a2ea6cb5bad7938ee09ed384155418aece026bb66c3e653d7762ff554c808a1781ec8de32a411a17dba1b3579fa1eebf4c5e1059b3cd334d480396dfd1092fec525d8912f505d1340c716e9d447719719a273d3b68afda8cf4929189b79073927bb29656caa691d395c25c9411041703a76f8a4277ab4b9221173b6256e1cfae0f9f52a28b4adbc7be1d74e299acd87f7fd8957f731ecade0e4f28c5c7f19bdbcaebe920574bf7305d21bbba1d93a670f28d27d75cc680efe68135edee5c50ca243a5144cb2292c21e67eaa6dff7e6cb8f02e03c0be271b98968e7dafd57f6ae5993872ce9f8fbca33332abccfebe99e656c331ea3a4beee3e0c701900232c67ba8fa078dc9df70c9db4ac36ee0d6725b74c4185c4521650316398e3ede52344dde5104be59b6d7e5e6c4d5c6c0a3f3a60b1cd14317eeb06943f3d7a53883242cf7c32c74c49fabc9303c75bfd7f69c782c97e9cd45ced090b01dc81f75c40aaacffd92314a6f0b925c27278277d3be84293c12b39720b8a4a1a097a9c1be51d2db3ac76bb5e14bc4ffcee3351f795d579ad1d42cda9508c0d9bfb85914bbe8da112327fbb7447b4a249a1b0aed8f636b806b6e273fbbdb00241db0fdd104b6d30bce7e3c16ce8f1c7001a726596ab00a6f23c39581122f041b298d1a8a53a3bdac4e32a484a50ab0c9282d7b44c3f0cd2929a6aca6148455c5daf36d16fde83309d2164f377b21575184c2c47ce23e301851980b7bdc680be31c6f8de879ebbccc551ba68f6ef2f82a42d7d5d41a8c1abce3137f08ff1286b0e62d276da534b017f777fefbee4d0a533e55723ccc66a0d09e6f8f0ba308d43331799d19423d591850bb7ec09822c1b21779a539703af95fd347be8a0eedcb2588c0202ba8cd1c224d39b4c679f98d787d1d9d92a765b2197ce292522e2d96d27aa2a80bbf078a6cce661148288f50050fcaa86f6b8cb5529c733711934231333b64a0c534c68efc3eaf5866720fd2b92b5d242c4a53561c2058c4412d2c6bb2ba4f73b0b461a43d244ae283ad236c285050eb55444a1ba172307ba6da16660da1237cae8e1d2cb77f0e4d80d88e81aaeecd3a1cca8beae3f0878314a49a3ab897999f1801dcf28a173b36b15b64994d9d310975c46f53e2b20670069c91036629d97e6d1709826287c04f4f4b14e2c017fa7d1be05ee635da3c0495da5f0f5e786b828d075637931fb9b98cc2a282d30198e49da24beec5ed197d32ea7c96eb824dd5a42a4cbd47b196165dc424264cb20c9d49c1a8f33ff27c2bbb1cc345185a167ca4551f9db688dc5f91e0a258408a6296d65749477f0d5ffd259362d972ab8e3807e27e063ba2b6b19ad5fa8d5aaf3021d1ac385f7bacff3c9592b74fd9f511765aca2827d89d4d564fcb1af3bb12ab476faa6dac5b35fc230ea681f17f0596bb4cf3f3a6c691bdaab0a51b4aa508d6164ceeb17fb7d0c4a73fb5f3bd1701009ece07beff4a9096585780ff73f4ebdac53157387b168e2871839acc950f261352b2df2bb89d4597a32bb19c0eaa84d9698a23a02fb050ab7b8bb585fb69141f6d56a473d912310faeed26ff0fe3b5e29b4d7ecd372f1e26fa13f980a569e46e8d62045b870d01cd325ac4c9aee745f5f2e102ebe6160f9f163ccd605112bc9f4e72b2d4d33ea2d3e1cbeca68279cd966c7b1c6242ee929c74f35040f70f2997a580f39d50d06040bf54c55691b3ace87e9a19aea15fafc98ccc391f81ac7737ac1224555e9bac815296ea382c0c4aa50287f8b8b72cbfdd3ab5923f082c10d210963ed8136a07c0eaae556f812dfe9db220507cbded6a8f42269796f09a6a1a8ffc6c0d9fe52a5c825bfa94e1ea94738a50d441df33a86995d42061cb3398e2507bf0f131c41db4dfe7033ab6814f231d9cd31c54502df6cd169908a2a23ddc52bce352a46eeb120992f345494ab99a48bb91957fd9acd69f134065811939f300e1c6f78065417e1295af7b62bac50dfbe11bda2a0e89d46b42bbe4e47121948f74051324216e26f9e365457bde8d8e18ed936e7320ee38bf18b937a858e6ccc2bc932c9d0df8b568b833860506281c56871e5cde1216b8a8d3ba859fcea9b27e97368dc98ac23d65578cd31aeccf96a8afce598a0116d73f8d4533291cdc2f909821e59541ed3d87af9dcc821225f8c5818dc40ec3902183601f68809b60a50fe90a8a27ada3e19c8decea328bc8e549d73004a402639253cb3a27a95e9de9dbece3092946f0e23d8ffc8da5eee18ce7c25aff770dd2f8e1af5590a9146192f514a0b84de8332a1645d1361fe1098698cf5f24f051a86d0418ab0849200209d8c974fd07f4067b3f9a46506fb09e751976d23f3729305cc7988198e47c7572d6fed5ee0207aed0043abbae6a29ef6b5c1ce118f55c86aad84d545227d905b1812ba6ecd7eeb0abda45a73cd96aa5d17b4c62479c6f1629de1c49bd4fcf7cc4";
                pubBytes = "0030806f490188b3cb38c0b8b234fa6c56e86d0b226a9185286d5ee804cd379e4602aa4d04dc618a699fa73bd85039c7adf9fdf7f614a9e1d0ad4a6400e836874ba97e8849f48eb9bc99eb52203e54b9895c54ae1a688dff4c4d121849c630d8392ff844e430c550e81b968bad39b6dc13df132624b5ddb62388ecb1321e498e1107cf947a4b68e310b2d48c2951ad366446f4b402e7d1e8f437946f41f071d90ee7325a29f5621d3dd757eb962688ee1f21a93ebf175e1a01e6c7726669f399be28b7c9e4f80f00c9ae1f368deeab981f765d5e2c6a1f21536e502ff29fb23ef5429c5ee2b0655af9b7fbb7aebf579db9996a64e7677fb1fdeef77dfd1d3f96e0b82e0c0caf7aacb59ba5a751597c25a444b09a01b816240339ab08ec1c40b0c69b30e0999ed3c5891a0e3df4cb50f561122ce8cbdb63c93eef199ab37725f3362d419ad643c4810ebac83e2d3ebfa6e8fd10d79fa87ad94fd2b9924b9b0c01faacfdb198dae33cac2f4621c1f6414be4ec364514bbfce92a4adc6bc52463ef0e064c0329ed632a4e4aa5a72e911ac9fa96a60696d035978251b8bec722b34207b45452db3d12565612a915a3889cd7ae81531e878e3667fc0d48999f14b4ecba0ab10a8582020f3a9564626998fe5f5362a0441773acff8630fea46f0a9bb8218b8fa3939a54a26303ac0bdfc1b4799d2615bd3ee7ff1b1b3e413df148f2ac33ff553e108bfcf729293298d037fee2775e44058050ef35fd86ab8c59223dadd9b1aecb747b6e776ba5e598ab451614b5fbec1cc1249f188e171003b173eb2a0715a0a937cdfd43fc627796205c55e6d67438e1a21b80dc222e9a4d094063805cb59a822b63ef30ae9a5ac19c8d4d641119def8bad3373eb83118ebaf1dc809ac21a7e0c24394eb7b4954af34581e394abc4726ad37a198b87a1ef18be1b0a954121e7194f75cf804838874c0ab53cebc61ef1bf8bd93f29ff843b36d98b344d2e33a536b207143f4910b02eeb3ccd186f75eb7afc53f207e58a09e1d9df760c1b2bb252837b04243c15363c26fbf2b5c05a7b72d01191acb02ed06df3250a2e7a6ce22016cb36b8f9b50a2de1f9803e923433e49da58e73ee96edee75378e8c61254eca93c026618824bb25575d33822b81a2b4a0b25e3b319863b3f8e1f21e968a49a4acfe2942a7479d94bf947dbf0553df6c12dab8e696a99821264278a0511034e24ba0f9046309f846312e7ef1032101d6086c69ad4280b85c704f8d587d10279f751011becbf1f2b52c41445185ac597672151e8ab42cedbe9fd242cdc78b74f2403804da6ac1dfe3828a9902b973c5c3b480e5ac83688e9c3ecd38bacac9dbc2a2293a6f5f35213f8eba00c5393e92088c6e807cb7cba1dc8f09d6b30bcaaaaf99106eb2487a8291dd61bb977a23ccca60e14d2cb1a8a1f3f72306a75b188ac8f7b7425153ecc55e06367d18cab3b893ca05b9046274445c1d4ace4a46d1122c19ca5892335ba3fd1e742f5212d2493cd5ed7e66ce677258d6d352beca3665358e89ab0979e25ff988bfe03c782c641c4efd757199abb2ed3873503cd368e6fcf16f13f5ff2ba9432bd741b199993c80fbec00c652910d5770fc2ac7214fe1874cc465d68c53ea7903b984df92a01d1e241ece1df02ad917634e429a36fd5fc63e642ddf8ac143e45dcc7cee17fddb72faa595cf338a1a975fed7c6a471750fa3114fc80e25f70a46c1ff4dcf14a4be5658d208377ff17bca28905919f4cde9dc158c6163d4e9f3de34d7138d9f836da80197012a2a8a8a2ae057bd5adf0ff1a24eb26dc4accc70c9ba916ce067b4e0424884c4477b1e325c49f45f3953693b0b6147c5e599f348c2c19ef16f18d376ae4e7f4e86b378a67737b627b6120a44078298914d54c9b8f1cf2b29bf23993b18bba3b38bf9743e48f41905f958cd531ef1f6f94953b6d2332bc7812f1f40dd7d945a00b8ca1b455b04e982d88c338b53782e60e8d44516e1eb574472c19c8608f1f37821b20067f950ef62ca4359117e5906d044a2b06ed5cf41b6f3c8085ffb3054d79c5337dba53d46aef415a43ac93c239f2fa7ff5e99ad78941e170d3df9b249d5cfc9f13599e651810a32b0b9be86800d953293d6890e4acbba9d86e02d990a75e439c9545fa566d90b9db5eaefad35ba7a406d496e024e3e336ae1d68c66858e4776c367ac0959a2a4ea9a028f539427c7037fab3de5fa80f03aed12e9b442ae3dff322118b64171599e6a8f3a6a478da8820a226233979a247a1d68ec071ae11f8904c29c6d22008b94cde90ef549fa8aa497be9562a84ba9467a00a25917763d7378edd6eb830f82f1d2fd5c179d17872d243c6b1a3d979acf1c56851bea6a9fcb638c696a796248abe6e13a635809b58bf519c0ba0525240db22f3c6e526fa455f88303c7f73603b657c1bb137b2949d5ab0dd061ee941524ef025278574a6eb9a12591d5c431f4b645148afb65bb33dac5154b3caf622aa3743f52aa92b2d4be274e65fe39366e2e122d50fa175801c4b097ca2ad2e5072c2fd5f1ef74902aa8fce40165cab2a3f0bd123af7a38510c369964f525fd3e8d8737af6345d04fb7665a02ece9070b71ebece99923687fa949408b49c566907b2191261ee60df5100b86bb0b5e601c3b5bc51e4ac2dd48bbb0c7add8b1908ab39b726ecde99b270893a3ca085f768f2a01334933479a0830f7b7c161a6c223420b881fcdbbe21de5e219e7875079555";
                break;
            default:
                return;
        }
        byte[] privKey = HexFormat.of().parseHex(privBytes);
        byte[] pubKey = HexFormat.of().parseHex(pubBytes);

        pqcKeyFactory = KeyFactory.getInstance(Algorithm, getProviderName());
        
        RawKeySpec pubSpec = new RawKeySpec(pubKey);
        RawKeySpec privSpec = new RawKeySpec(privKey);

        PublicKey publicKey = pqcKeyFactory.generatePublic(pubSpec);
        PrivateKey privateKey = pqcKeyFactory.generatePrivate(privSpec);

        //Need to extract just the key material from the key to do the compare
        byte[] newPubKey = parsePub(publicKey.getEncoded());
        byte[] newPrivKey = parsePriv(privateKey.getEncoded());

        assertArrayEquals(newPubKey, pubKey, "Public key does not match generated public key - "+Algorithm);
        assertArrayEquals(newPrivKey, privKey, "Private key does not match generated public key - "+Algorithm);

    }

    byte[] parsePub(byte[] key) throws InvalidKeyException{
        byte[] keyMaterial = null;

        try {
            DerValue val = new DerValue(key);
            if (val.tag != DerValue.tag_Sequence)
                throw new InvalidKeyException("invalid key format");

            AlgorithmId algid = AlgorithmId.parse(val.data.getDerValue());
            algid.encode();
            keyMaterial = val.data.getUnalignedBitString().toByteArray();
            if (val.data.available() != 0)
                throw new InvalidKeyException ("excess key data");

        } catch (IOException e) {
            throw new InvalidKeyException("Unable to decode key", e);
        }
        return keyMaterial;
    }

    byte[] parsePriv(byte[] key) throws InvalidKeyException {
        byte[] keyMaterial = null;
        try {
            DerValue val = new DerValue(key);
            if (val.tag != DerValue.tag_Sequence) {
                throw new InvalidKeyException("invalid key format");
            }

            int version = val.data.getInteger();
            if (version != 0 && version != 1) {
                throw new InvalidKeyException("unknown version: " + version);
            }
            AlgorithmId algid = AlgorithmId.parse (val.data.getDerValue ());
            algid.encode();

            byte[] tmp = val.data.getOctetString();

            DerValue next;
            if (val.data.available() == 0) {
                // remove octet tag
                keyMaterial =  Arrays.copyOfRange(tmp, 4, tmp.length);
                return keyMaterial;
            }
            next = val.data.getDerValue();
            if (next.isContextSpecific((byte) 0)) {
                if (val.data.available() == 0) {
                    keyMaterial =  Arrays.copyOfRange(tmp, 4, tmp.length);
                    return keyMaterial;
                }
                next = val.data.getDerValue();
            }

            if (next.isContextSpecific((byte) 1)) {
                if (version == 0) {
                    throw new InvalidKeyException("publicKey seen in v1");
                }
                if (val.data.available() == 0) {
                    keyMaterial =  Arrays.copyOfRange(tmp, 4, tmp.length);
                    return keyMaterial;
                }
            }
            throw new InvalidKeyException("Extra bytes");
        } catch (IOException e) {
            throw new InvalidKeyException("Unable to decode key", e);
        }  
    }
}
